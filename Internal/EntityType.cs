namespace EdmxSourceGenerator.Internal;

using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Xml.Linq;

internal class EntityType
{
    internal EntityType(string @namespace, XElement element)
    {
        this.Namespace = @namespace;
        var elem = (XElement)element.FirstNode;
        do
        {
            switch (elem.Name.LocalName)
            {
                case "Property":
                {
                    var name = elem.Attribute("Name")!.Value;
                    var maxLength = elem.Attribute("MaxLength")?.Value;
                    var type = elem.Attribute("Type")!.Value;
                    var nullable = elem.Attribute("Nullable")?.Value;
                    if (string.IsNullOrEmpty(nullable))
                    {
                        nullable = "true";
                    }

                    this.Properties.Add(
                        new Property(
                            name,
                            maxLength,
                            type,
                            Convert.ToBoolean(nullable)));
                    break;
                }
                case "NavigationProperty":
                {
                    var name = elem.Attribute("Name")!.Value;
                    var toRole = elem.Attribute("ToRole")!.Value;
                    this.NavigationProperties.Add(new NavigationProperty(name, toRole));
                    break;
                }
            }

            elem = (XElement)elem.NextNode;
        }
        while (elem != null);
    }

    internal string Name { get; set; }
    private string Namespace { get; }
    private List<Property> Properties { get; } = new();
    private List<NavigationProperty> NavigationProperties { get; } = new();

    public override string ToString()
    {
        var result = new StringBuilder($@"// <auto-generated/>
namespace {this.Namespace};

{(this.SystemUsingNeeded() ? @"using System;
" : "")}{(this.ConstructorNeeded() ? @"using System.Collections.Generic;
" : "")}{(this.DataAnnotationsNeeded() ? @"using System.ComponentModel.DataAnnotations;
" : "")}{(this.DataAnnotationsSchemaNeeded() ? @"using System.ComponentModel.DataAnnotations.Schema;
" : "")}{(this.ConstructorNeeded() ? @"using System.Diagnostics.CodeAnalysis;
" : "")}
public partial class {this.Name}
{{
    ");
        if (this.ConstructorNeeded())
        {
            _ = result.Append($@"public {this.Name}()
    {{
");
            foreach (var navigationProperty in this.NavigationProperties)
            {
                var code = navigationProperty.ToConstructorCode();
                _ = (this.NavigationProperties.IndexOf(navigationProperty) + 1 < this.NavigationProperties.Count, !string.IsNullOrEmpty(code)) switch
                {
                    (true, true) => result.Append($@"{code}
"),
                    (false, true) => result.Append($@"{code}
    "),
                    (false, false) => result.Append("    "),
                    _ => result
                };
            }

            _ = result.Append(@"}

    ");
        }

        foreach (var property in this.Properties)
        {
            if (property.IsPrimaryKey(this.Name))
            {
                _ = result.Append(@"[Key]
    ");
            }
            else if (this.NavigationProperties.Any(np => np.IsForeignKey(property, this.Name)))
            {
                _ = result.Append($@"[ForeignKey(nameof({property.Name}))]
    ");
            }

            _ = this.Properties.IndexOf(property) + 1 < this.Properties.Count
                ? result.Append($@"{property.MaxLengthToCodeString()}{(!string.IsNullOrEmpty(property.MaxLengthToCodeString()) ? @"
    " : "")}{property}
    ")
                : result.Append($@"{property.MaxLengthToCodeString()}{(!string.IsNullOrEmpty(property.MaxLengthToCodeString()) ? @"
    " : "")}{property}
");
        }

        foreach (var navigationProperty in this.NavigationProperties)
        {
            if (this.NavigationProperties.IndexOf(navigationProperty) == 0)
            {
                _ = result.AppendLine();
            }

            _ = result.Append($@"    {navigationProperty}");
        }

        _ = result.Append(@"}
");
        return result.ToString();
    }

    private bool ConstructorNeeded()
        => this.NavigationProperties.Any(
            navigationProperty => navigationProperty.IsCollection);

    private bool SystemUsingNeeded()
        => this.Properties.Any(
            prop => prop.SystemUsingNeeded());

    private bool DataAnnotationsNeeded()
        => this.Properties.Any(
            prop => !string.IsNullOrEmpty(prop.MaxLengthToCodeString()) || prop.IsPrimaryKey(this.Name));

    private bool DataAnnotationsSchemaNeeded()
        => this.Properties.Any(
            p => this.NavigationProperties.Any(np => np.IsForeignKey(p, this.Name)));
}
