namespace EdmxSourceGenerator.Internal;

using System.Collections.Generic;
using System.Text;
using System.Xml.Linq;

internal class DataContext
{
    internal DataContext(string @namespace, string name, XElement element)
    {
        this.Namespace = @namespace;
        this.Name = name;
        var elem = (XElement)element.FirstNode;
        do
        {
            if (elem.Name.LocalName is "EntitySet")
            {
                var entityName = elem.Attribute("Name").Value;
                var splittedEntityType = elem.Attribute("EntityType").Value.Split('.');
                var entityType = splittedEntityType[splittedEntityType.Length - 1];
                this.EntitySets.Add(new(entityName, entityType));
            }
            else if (elem.Name.LocalName is "FunctionImport")
            {
                var functionName = elem.Attribute("Name").Value;
                this.FunctionImports.Add(new(functionName));
            }

            elem = (XElement)elem.NextNode;
        }
        while (elem != null);
    }

    internal string Namespace { get; private set; }
    internal string Name { get; private set; }
    internal List<EntitySet> EntitySets { get; private set; } = new();
    internal List<FunctionImport> FunctionImports { get; private set; } = new();

    public string ToMethodCodeString()
    {
        var result = new StringBuilder($@"// <auto-generated/>
namespace {this.Namespace};

using System.Data.Entity;
using System.Threading.Tasks;

public partial class {this.Name}
{{
");
        foreach (var entitySet in this.EntitySets)
        {
            _ = result.Append($@"    public async Task Create{entitySet.EntityType}Async({entitySet.EntityType} {entitySet.EntityType.ToLowerInvariant()})
    {{
        _ = this.{entitySet.Name}.Add({entitySet.EntityType.ToLowerInvariant()});
        _ = await this.SaveChangesAsync().ConfigureAwait(false);
    }}

    public async Task Edit{entitySet.EntityType}Async({entitySet.EntityType} {entitySet.EntityType.ToLowerInvariant()})
    {{
        this.Entry({entitySet.EntityType.ToLowerInvariant()}).State = EntityState.Modified;
        _ = await this.SaveChangesAsync().ConfigureAwait(false);
    }}

    public async Task Delete{entitySet.EntityType}Async({entitySet.EntityType} {entitySet.EntityType.ToLowerInvariant()})
    {{
        if ({entitySet.EntityType.ToLowerInvariant()} != null)
        {{
            this.Entry({entitySet.EntityType.ToLowerInvariant()}).State = EntityState.Deleted;
            _ = await this.SaveChangesAsync().ConfigureAwait(false);
        }}
    }}
{(this.EntitySets.IndexOf(entitySet) + 1 < this.EntitySets.Count ? @"
" : "")}");
        }
        _ = result.Append(@"}
");
        return result.ToString();
    }

    public override string ToString()
    {
        var result = new StringBuilder($@"// <auto-generated/>
#nullable enable
namespace {this.Namespace};

using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Validation;
using System.Diagnostics;
using System.Threading.Tasks;

public partial class {this.Name} : DbContext
{{
    public {this.Name}()
        : base(""name={this.Name}"")
    {{
    }}

    public static HomeInventoryEntities Create()
        => new();

    public override async Task<int> SaveChangesAsync()
    {{
        try
        {{
            return await base.SaveChangesAsync().ConfigureAwait(false);
        }}
        catch (DbEntityValidationException ex)
        {{
            foreach (var entityValidationErrors in ex.EntityValidationErrors)
            {{
                foreach (var validationError in entityValidationErrors.ValidationErrors)
                {{
                    Debug.WriteLine($""Property: {{validationError.PropertyName}} Error: {{validationError.ErrorMessage}}"");
                }}
            }}

            throw;
        }}
    }}

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
        => throw new UnintentionalCodeFirstException();

");
        foreach (var entitySet in this.EntitySets)
        {
            _ = result.Append($"    {entitySet}");
        }

        foreach (var functionImport in this.FunctionImports)
        {
            _ = result.Append(functionImport.ToString());
        }

        _ = result.Append(@"}
");
        return result.ToString();
    }
}
