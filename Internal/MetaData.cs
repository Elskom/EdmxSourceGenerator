namespace EdmxSourceGenerator.Internal;

using System.Text;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using YamlDotNet.RepresentationModel;

internal class MetaData
{
    internal MetaData(string content, List<EdmxFile> edmxFiles)
    {
        this.Content = content;
        this.EdmxFiles = edmxFiles;
    }

    internal List<EdmxFile> EdmxFiles { get; }
    private string Content { get; }

    internal string GenerateCode()
    {
        var result = new StringBuilder();
        if (!this.EdmxFiles.Any())
        {
            return result.ToString();
        }
        
        _ = result.Append($@"// <auto-generated/>

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

");
        if (this.EdmxFiles.Count == 1)
        {
            var edmxFile = this.EdmxFiles[0];
            _ = result.Append($@"namespace {edmxFile.Namespace};
{this.WriteEntityMetadata()}");
        }
        else
        {
            foreach (var edmxFile in this.EdmxFiles)
            {
                _ = result.Append($@"namespace {edmxFile.Namespace}
{{
{this.WriteEntityMetadata(true)}}}
");
            }
        }

        return result.ToString();
    }

    private string WriteEntityMetadata(bool indent = false)
    {
        // Setup the input
        using var content = new StringReader(this.Content);

        // Load the stream
        var yaml = new YamlStream();
        yaml.Load(content);

        var result = new StringBuilder();
        var mapping = (YamlMappingNode)yaml.Documents.First().RootNode;
        foreach (var node in mapping.Children)
        {
            _ = result.Append($@"
{(indent ? "    " : "")}[MetadataType(typeof({node.Key}MetaData))]
{(indent ? "    " : "")}public partial class {node.Key}
{(indent ? "    " : "")}{{
{(indent ? "    " : "")}    private sealed class {node.Key}MetaData
{(indent ? "    " : "")}    {{
");
            foreach (var valueNode in ((YamlSequenceNode)node.Value).Children)
            {
                foreach (var child in ((YamlMappingNode)valueNode).Children)
                {
                    var propertyType = string.Empty;
                    foreach (var tmp1 in ((YamlSequenceNode)child.Value).Children)
                    {
                        foreach (var propType in ((YamlMappingNode)tmp1).Children.Where(n => n.Key.ToString() == "PropertyType"))
                        {
                            propertyType = propType.Value.ToString();
                        }

                        foreach (var tmp2 in ((YamlMappingNode)tmp1).Children.Where(n => n.Key.ToString() == "attributes"))
                        {
                            foreach (var attributes in ((YamlSequenceNode)tmp2.Value).Children)
                            {
                                _ = result.Append($@"{(indent ? "    " : "")}        [{attributes}]
");
                            }
                        }
                    }

                    _ = result.Append($@"{(indent ? "    " : "")}        public {propertyType} {child.Key} {{ get; set; }}
");
                }
            }

            _ = result.Append($@"{(indent ? "    " : "")}    }}
{(indent ? "    " : "")}}}
");
        }

        return result.ToString();
    }
}
